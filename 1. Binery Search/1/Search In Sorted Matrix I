Given a 2D matrix that contains integers only, which each row is sorted in an ascending order. The first element of next row is larger than (or equal to) the last element of previous row.
Given a target number, returning the position that the target locates within the matrix. If the target number does not exist in the matrix, return {-1, -1}.

Assumptions:
•	The given matrix is not null, and has size of N * M, where N >= 0 and M >= 0.

Examples:
matrix = { {1, 2, 3}, {4, 5, 7}, {8, 9, 10} }
target = 7, return {1, 2}
target = 6, return {-1, -1} to represent the target number does not exist in the matrix.

input: 2D matrix – int[][] matrix
	   target number – int target;
	  if (matrix.length == 0 || matrix[0] == 0) {
	return [-1, -1,];
} 

output: target location – [m,n]
	   [-1, -1]

algorithm: binary search

variable: left border – int left;
		right border – int right;
		middle index – int mid;
		row – int row = mid / matrix.length;
		col – int col = mid % matrix.length;
		output [m, n] from mid

corner case: LMR

time complexity: log(n)
space complexity: 1

public class Solution {
  public int[] search(int[][] matrix, int target) {
 // check the input is valid
if (matrix.length == 0 || matrix[0].length == 0) {
    return new int[]{-1, -1};
}
  
  // left and right
  int left = 0;
  int right = matrix.length * matrix[0].length - 1;
  int mid = (left + right) / 2;
  int row = mid / matrix[0].length;
  int col = mid % matrix[0].length;

// watch out the divider, it should be the length of the row
  while (left <= right) {
  mid = (left + right) / 2;
row = mid / matrix[0].length;
    col = mid % matrix[0].length;
  if (matrix[row][col] == target) {
  return new int[]{row,col};
} else if (matrix[row][col] < target) {
  left = mid + 1;
} else if (matrix[row][col] > target) {
  right = mid - 1;
}
}

return new int[]{-1, -1};

  }
}

