Given a target integer T and an integer array A sorted in ascending order, find the index i in A such that A[i] is closest to T.
Assumptions
•	There can be duplicate elements in the array, and we can return any of the indices with same value.
Examples
•	A = {1, 2, 3}, T = 2, return 1
•	A = {1, 4, 6}, T = 3, return 1
•	A = {1, 4, 6}, T = 5, return 1 or 2
•	A = {1, 3, 3, 4}, T = 2, return 0 or 1 or 2
Corner Cases
•	What if A is null or A is of zero length? We should return -1 in this case.

input: target integer T – int target;
	  integer array A – int[] array;
	  if (array == null || array.length == 0) {
	return -1;
}

output: closest number index i – int index;
	   

algorithm: binary search

variable: left border – int left;
		right border – int right;
		middle index – int mid;

data structure:

corner case: LR

time complexity: log(n)
space complexity: 1



public class Solution {
  public int closest(int[] array, int target) {
	      // check the input
    if (array == null || array.length == 0) {
    return -1;
}
  
  // create variables
  int left = 0;
  int right = array.length - 1;
  int mid = (left + right) / 2;
  
  // loop
  while (left + 1 < right) {
  mid = (left + right) / 2;
  if (array[mid] == target) {
  return mid;
} else if (array[mid] > target){ // 关键点，不能排除Mid
  right = mid;
} else if (array[mid] < target){
  left = mid;
}
}

if (Math.abs(target - array[left]) <= Math.abs(target - array[right])) {
  return left;
} else {
  return right;
}


  }
}

